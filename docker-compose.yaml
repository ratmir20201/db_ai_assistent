services:
#  vertica:
#    image: vertica/vertica-ce
#    ports:
#      - "${VERTICA__PORT}:5433"
#    environment:
#      VERTICA_DB_NAME: ${VERTICA__DATABASE}
#      VERTICA_DB_USER: ${VERTICA__USER}
#      VERTICA_DB_PASSWORD: ${VERTICA__PASSWORD}
#    volumes:
#      - vertica_data:/opt/vertica/data
#    networks:
#      - app-network

  api:
    build:
      dockerfile: Dockerfile
    env_file:
      - .env
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      - vertica
      - mistral
      - postgres
    networks:
      - app-network

  postgres:
    container_name: postgres
    image: postgres:17.2
    env_file:
      - ../db_ai_assistent_copy/.env
    environment:
      TZ: ${TIMEZONE}
      POSTGRES_DB: ${DB__NAME}
      POSTGRES_USER: ${DB__USER}
      POSTGRES_PASSWORD: ${DB__PASSWORD}
      log_destination: stderr
      logging_collector: on
      log_directory: /var/lib/postgresql/data/log
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${DB__NAME} -U ${DB__USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${DB__PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

#  mistral:
#    cpus: 4
#    mem_limit: 8g
#    build:
#      dockerfile: Dockerfile-ollama
#    env_file:
#      - .env
#    environment:
#      - OLLAMA_HOST=${LLM__HOST}
#      - OLLAMA_MODEL=${LLM__MODEL}
#    ports:
#      - "${LLM__PORT}:11434"
#    restart: always
#    networks:
#      - app-network
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: nvidia
#              count: 1
#              capabilities: [ gpu ]

  redis:
    image: redis:7.4.2
    restart: always
    ports:
      - "${REDIS__PORT}:6379"
    networks:
      - app-network


networks:
  app-network:
    driver: bridge

volumes:
  vertica_data: